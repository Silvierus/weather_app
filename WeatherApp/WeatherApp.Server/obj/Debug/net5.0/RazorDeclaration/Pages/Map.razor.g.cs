// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WeatherApp.Server.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\silvi\source\repos\WeatherApp\WeatherApp.Server\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\silvi\source\repos\WeatherApp\WeatherApp.Server\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\silvi\source\repos\WeatherApp\WeatherApp.Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\silvi\source\repos\WeatherApp\WeatherApp.Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\silvi\source\repos\WeatherApp\WeatherApp.Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\silvi\source\repos\WeatherApp\WeatherApp.Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\silvi\source\repos\WeatherApp\WeatherApp.Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\silvi\source\repos\WeatherApp\WeatherApp.Server\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\silvi\source\repos\WeatherApp\WeatherApp.Server\_Imports.razor"
using WeatherApp.Server;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\silvi\source\repos\WeatherApp\WeatherApp.Server\_Imports.razor"
using WeatherApp.Server.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\silvi\source\repos\WeatherApp\WeatherApp.Server\Pages\Map.razor"
using GoogleMapsComponents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\silvi\source\repos\WeatherApp\WeatherApp.Server\Pages\Map.razor"
using GoogleMapsComponents.Maps;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/map")]
    public partial class Map : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 42 "C:\Users\silvi\source\repos\WeatherApp\WeatherApp.Server\Pages\Map.razor"
        
    private GoogleMap map1 = default!;
    private MapOptions mapOptions = default!;
    private WeatherApp.Logic.WeatherPythonApi api = new Logic.WeatherPythonApi();
    private WeatherApp.Logic.WeatherRequest request = new Logic.WeatherRequest();
    private bool isTraining = false;
    private bool isDoneTraining = false;
    private bool hasFailed = false;

    private Stack<Marker> markers = new Stack<Marker>();
    private LatLngLiteral latLng = null;
    private string labelText = "";
    private string imageResult = "";
    private float tmwWeather = 0;

    protected void Refresh()
    {
        isDoneTraining = false;
        StateHasChanged();
    }

    protected async Task Train()
    {
        imageResult = "";
        hasFailed = false;
        isDoneTraining = false;
        isTraining = true;
        StateHasChanged();

        if (latLng == null)
        {
            return;
        }
        request.Lat = latLng.Lat;
        request.Lon = latLng.Lng;

        var results = await api.SendTrainLocation(request);
        
        if(results.Reason == "")
        {
            imageResult = results.ResultImage;
            tmwWeather = (float) Math.Round(results.WeatherPredictedTomorrow, 1);
            Console.WriteLine(imageResult);
        }
        else
        {
            hasFailed = true;
        }

        isDoneTraining = true;
        isTraining = false;

        StateHasChanged();

    }

    protected override void OnInitialized()
    {
        mapOptions = new MapOptions()
        {
            Zoom = 5,
            Center = new LatLngLiteral()
            {
                Lat = 52,
                Lng = 0
            },
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private async Task OnAfterInitAsync()
    {
        await map1.InteropObject.AddListener<MouseEvent>("click", async (e) => await OnClick(e));
    }


    private async Task OnClick(MouseEvent e)
    {
        await RemoveMarker();
        await AddMarker(e.LatLng);

        latLng = e.LatLng;
    }


    private async Task AddMarker(LatLngLiteral latling)
    {
        var marker = await Marker.CreateAsync(map1.JsRuntime,
            new MarkerOptions()
            {
                Position = latling,
                Map = map1.InteropObject,
                Draggable = false,
                Icon = new Icon()
                {
                    Url = "https://www.pngall.com/wp-content/uploads/2017/05/Map-Marker-PNG-File.png",
                    ScaledSize = new Size { Height = 35, Width = 35}
                }
            });

        var icon = await marker.GetIcon();

        Console.WriteLine($"Get icon result type is : {icon.Value.GetType()}");

        icon.Switch(
            s => Console.WriteLine(s),
            i => Console.WriteLine(i.Url),
            _ => { });

        markers.Push(marker);
        labelText = await marker.GetLabelText();

        await marker.AddListener<MouseEvent>("click", async e =>
        {
            string markerLabelText = await marker.GetLabelText();
            StateHasChanged();
            await e.Stop();
        });
        await marker.AddListener<MouseEvent>("dragend", async e => await OnMakerDragEnd(marker, e));
    }

    private async Task OnMakerDragEnd(Marker M, MouseEvent e)
    {
        string markerLabelText = await M.GetLabelText();
        StateHasChanged();
        await e.Stop();
    }

    private async Task RemoveMarker()
    {
        if (!markers.Any())
        {
            return;
        }

        var lastMarker = markers.Pop();
        await lastMarker.SetMap(null);
        labelText = markers.Any() ? await markers.Peek().GetLabelText() : "";
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
